/* *flex: 부모가 자손을 배치하는 방식 (ul한테 flex)
   *float: 자손들끼리 배치하는 방식 (ul li에다가 float 줌) */

.flexContainer{
    margin: 10px; padding: 15px; border-radius: 23px; background-color: #a4a4a4;
    display: flex;
}
.flexItem{
    margin: 10px; padding: 20px; color: white; text-align: center; border-radius: 27px;
    background-color: black;
}
/*  row: left to right
    row-reverse: right to left (float: right)
    column: top to bottom
    column-reverse: bottom to top (float에서 불가능)
*/
/* column reverse 열 정렬되고 위아래 바뀜 */
.flexContainer.direction{
    flex-direction: column-reverse;
}
/* nowrap (default/ 개행불허 flexItem width자동축소 /줄바꿈 안됨 인블이나 플롯이였으면 부모가 2500을 담을 수 없으니 무조건 떨어짐 
           플렉스는 부모가 자손을 배치함 모든 권한이 부모에게 있음 감싸지 않는다 떨어지지 않는다 
   wrap:너비만큼 다 갖고 떨어짐 (width초과시 개행)
   wrap-reverse: 아래 왼쪽에서 오른쪽으로가다가 위로 쌓아올려지는 방식 (개행하되 역배치) */

/* direction row-reverse랑 같이 쓰면 오른쪽에서 위로 밀면서 위로 쌓아올리기 */
.flexContainer.wrap{
    flex-wrap: wrap-reverse; flex-direction: row-reverse;
}
/* 값들의 너비를 지정해야함 */
.flexContainer.wrap .flexItem,
.flexContainer.flow .flexItem{
    width: 500px;
}
/* flex-flow: direction wrap 한번에 쓰기(위위에는 나눠서 씀) */
.flexContainer.flow{
    flex-flow: row-reverse wrap-reverse;
}
/* 플롯과 플렉스의 가장 큰 차이점
     플롯에는 정렬이 없음 플롯된 걸 부모가 마진0오토등으로 움직이는것 
     플렉스는 부모가 기준을 잡아서 자손들에게 정렬을 내릴 수 있음 trbl이런 단어를 아예 안씀 start,end 등등 사용
        x,y각 정렬법 3개 갖고있음 (items 안중요 content 가장 중요)  
       xAxis : justufy  
         1. -content : 부모를 기준으로 자손을 정렬 시키는 방법
         2. -items : 자손들끼리 정렬하는 방법
         3. -self : 자기 혼자 정렬하는 방법 

       yAxis: align
         1. -content : 부모를 기준으로 자손을 정렬 시키는 방법
         2. -items : 자손들끼리 정렬하는 방법
         3. -self : 자기 혼자 정렬하는 방법
         
     ab이나 텍스트 버티컬 얼라인등은 축이 변하지 않았음 
     근데 플렉스공간내애서 x,y축은 의미가 없음 direction의 영향을 받음 축이 돌아갈 수 있음 좌중우상중하가 바뀔 수 있다
        row-reverse하면 축이 바뀌어버리는것 
        column은 시계방향 회전 x,y축이 바뀜
        column-reverse하면 start end가 바뀜 
        column-reverse로 x,y축이 회전해서 바뀌어도 y가 된 연두색을 건드리고 싶으면 justify*/

/* flex-start default 원래 왼쪽에서 정렬 
   flex-end 디렉션 로우리벌스랑 다름 그냥 그대로 움직여서 오른쪽 정렬
   center 가운데 정렬 (플롯은 못해도 인라인블럭으로도 할 수 있음) 
   space 3형제 매우 중요
    -between : 첫이 부모의 왼쪽 끝 마지막이 부모의 오른쪽 끝 기준으로 여백없이 0으로 붙음 나머지 간격은 다 같음
    -around : 항목 간 간격을 최대한 벌려놓고 남은 공간을 좌우에 나누기 2해서 첫 마지막에다가 버림 부모 경계선과 닿지 않게 
    -evenly :  간격 다 동일하게 */
.flexContainer.justifyContent{
    justify-content: space-evenly; padding: 0;
}
.flexContainer.justifyContent .flexItem,
.flexContainer.alignContent .flexItem{
    margin: 0;
}
/* 높이 지정을 안하면 아무 변화가 없음 
    wrap
    align은 justify가 없는 스트레칭이라는 속성이 디폴트임 늘리는 것 그래서 wrap으로 끊어버리기 그때부터 얼라인이 가동함*/
    /* SPACE-between위 아래가 붙는거임 
       justify-content: space-evenly;까지 쓰면 사방배치가 가능 근데 이 모든건 너비가 500px로 굳어있고 wrap설정이 되어있기 때문 
       align(수직)과 justify(수평)를 같이 쓸때는 direction안쓰는게 나음 갈피를 못잡음*/
.flexContainer.alignContent{
   height: 400px; align-content: space-evenly; justify-content: flex-end; flex-wrap: wrap;
    padding: 0;
}
.flexContainer.alignContent .flexItem{
    width: 500px;
}
/* ! 그리드방식일때 / 그리드가 뭐냥.....*/
/* * items 안에 요소들이 지들끼리 위치를 정함 그렇기 때문에 space라는 개념이 없음 지들끼리 움직이니까 공간을 못잡음 li들끼리 움직이는데 ul공간을 어떻게 잡나 content처럼 ul이 li를 움직이면 ul공간이 있지만..*/
.flexContainer.justifyItems{
    background-color: yellow; width: 300px; display: grid;
    flex-direction: column;
    justify-items: center;
}
.flexContainer.justifyItems:hover{
    justify-items: flex-end;
}
.flexContainer.alignItems{
    background-color: orange; align-items: center;
}
/* 마우스 올렸을때 제일 긴놈을 기준으로 위(start)나 밑단(end)을 맞춤 */
/* baseline안쪽에 있는 컨텐츠들의 맨 윗선을 기준으로 정렬 ( items라는 글자 ) */
.flexContainer.alignItems:hover{
    align-items: flex-start;
}
.flexContainer.alignItems .flexItem:first-of-type{
    line-height: 50px;
}
.flexContainer.alignItems .flexItem:nth-of-type(2){
    line-height: 100px
}
/* 나머지 애들 놔두고 지 혼자 움직임 얘도 space없음 */
.flexContainer.justifySelf{
    width: 220px; display: grid;
}
.flexContainer.justifySelf .flexItem:first-of-type{
    justify-self: stretch;
}
.flexContainer.justifySelf:hover .flexItem:first-of-type{
    justify-self: center;
}
/* space는 space대로 self는 self대로 작동한다 */
.flexContainer.alignSelf{
    justify-content: space-between;
}
.flexContainer.alignSelf .flexItem:first-of-type{
    align-self: flex-end;
}
.flexContainer.alignSelf:hover .flexItem:first-of-type{
    align-self: flex-start;
}
.flexContainer.alignSelf .flexItem:nth-of-type(2){
    line-height: 100px;
}
/* flex는 직계한테만 줌 안쪽까지 상속 아님 portland로 치면 header한테 주는게 아니라 header안에 div한테 flex줘야 nav나 로고 등을 오더 사용 가능 */
.flexContainer.orderItem .flexItem.order1{
    order: 1;
}
.flexContainer.orderItem .flexItem.order2{
    order: 0;
}
/* default order넘버는 0임 0보다 작아지면 앞으로 감 우리가 임의로 숫자를 주지 않으면 기준은 0*/
.flexContainer.orderItem .flexItem.order3{
    order: -2;
}
.flexContainer.flexShortHand{
    width: 50%; margin: 0; padding: 0; background-color: lightgreen;
    /* case2 test    max-width: 300px; */
}

/* ? flex-grow(팽창(확장)비):
! item의 증가비율을 정한다. default: 0. 즉, 빈 공간을 알아서 확장하여 채우지 않는다.
! 음수 비허용. 양수 입력 시 '총 증가 내부팽창지수(grow합산)의 너비중 입력된 비율만큼의 너비를 가진다.
! 단, max-width가 설정되면 해당 수치를 넘지 않는다.
* example. item이 3개이고 item들에게 grow가 1이 부여된다면 각각 1/3(33.33%)의 너비를 갖게 된다.
?ex.1 > 만약 전체 너비 (300px)의 item 3개에 개별적으로 grow가 부여되었다면?
todo. flexItem:first-child{flex-grow:2;} -> 0(basis) + (300/4)*2 = 150.
todo. flexItem:first-child~*{flex-grow:1;} -> 0(basis) + (300/4)*1 = 75.
? why 3(x) 4? = first 2 +  ~* 1 + 1. */
/* *2:1:1 비율이니까 2+1+1=4
* 너비가 50%니까 너비는 계속 변함 즉 300이라는 수치는 계속 바뀜(150,75라는 결과도) 하지만 비율은 안변함 */
/* flex-grow 팽창비 = 커지는 비율 설정 / 초기비율은 1:1:1 근데 팽창비를 주면 2:1:1 이런 설정이 되는데 2 받은애는 늘어날때 두배만큼 팽창 */
/* basis 어쩔때는 max-width(grow) 어쩔때는 min-width(shrink) 아무것도 안건들였을때는 auto임 컨텐츠 너비따라ㅇㅇ 암튼 꺼놔야함  */


/* 작은수치 계산 초과되는게 150이니까 나누기 4하면 37.5고 150에서 비율에 맞게 곱한 후 빼면 각 자손의 너비 */

/*
    ? flex-shrink(수축비):
    ! 기준되는 부모(절대)가 줄어들 때 item의 수축비를 정한다. default: 1.
    ! 음수 비허용. 양수 입력 시 '총 수축 내부수축지수(shrink합산)의 너비 중 입력된 비율 만큼 수축될 수 있다.
    ! 단, min-width가 설정되면 해당 수치를 넘지 않는다. (basis -> max로 변환 가동)
    * example. item이 3개이고 item들에게 shrink가 1이 부여된다면 각각 1/3의 수축비를 갖게된다.
    ?ex. 2 > 만약 수축중인 부모 너비가 300px인 item 4개(각너비 150px)에  shrink를 부여하면?
    todo. 초과되는 수치인 150 에 대한. shrink총합인 4를 나눈 37.5가 곧 shrink: 1이된다.
    todo. flexItem:first-child{flex-shrink: 2;} -> 150(대상너비) - (150/4)*2 = 75;
    todo. flexItem:first-child~*{flex-shrink: 1;} -> 150(대상너비) - (150/4)*1 = 112.5;
*/
/*
    basis:
    !item의 너비를 정한다. 기본값은 auto 이며 다양한 단위 percentages(%) || ems || rems || pixels 를 사용 할 수있다.
    auto : 안의 컨텐츠의 길이만큼 너비가 늘어난다.
*/
/*
    * 생략되는 형식
    flex: none;
    flex-grow:0; flex-shrink:0; flex-basis:auto; 상태가 된다.
    flex: <flex-grow>
    flex-shrink:1; flex-basis:0; 상태가 된다.
    flex: <flex-basis>
    flex-grow:1; flex-shrink:1; 상태가 된다.
    flex: <flex-grow> <flex-shrink>
    flex-basis:0; 상태가 된다.
    flex: <flex-grow> <flex-basis>
    flex-shrink:1; 상태가 된다.
    flex: <flex-grow> <flex-shrink> <flex-basis>
    생략한 속성 없음.
    
    todo 자주 사용되는 형식
    1. flex: 0 1 auto; : 확장비는 존재 하지 않고 (남은공간을 채우지 않는다.), 수축만 일어나며 컨텐츠의 너비만큼 너비가 설정된다.
    2. flex: none; : 확장비, 수축비 모두 존재하지 않는다.(남은공간을 채우지도 수축도 일어나지 않는다.)  컨텐츠의 너비만큼 너비가 설정된다.
    3. flex: auto; : 1 1 auto 와 같다. 확장비, 수축비 모두 컨텐츠 갯수만큼 비율로 분배되어 갖게 되고, 컨텐츠의 너비만큼 너비가 설정된다.
    !만약 그 너비가 컨텐츠 보다 작을땐 item이 container의 너비를 넘는다. (스크롤바 발생) word-break : break-all 로 제어.
*/


/* flex-shrink 수축비 여기서는 basis 가 min-width로 가동 */
.flexContainer.flexShortHand .flexItem{
    margin: 0; padding: 0; word-break: break-all;
}
/* * basis만 넣으면 팽창비 수축비 1 1 자동 들어간것에 너비만 설정한것 각각의 150까지는 늘어날 수 있는것 (우리입장에선 max-width로 가동) */
/* ! grow 줘야하면 basis 0 무조건 넣어야 가동 basis가 숫자로 정해져있으면 문제가 안됨 근데 오토인게 문제임 그럼 얘는 위에 적은 300계산처럼 계산이 안되니까 얼마나 늘어나야하는지 모름
   ! shrink일때는 basis가 max-width가동 */
/* basis는 단위가 있음 숫자만 하나 적으면 그건 grow라고 받아들임 */
.flexContainer.flexShortHand .flexItem:first-of-type{
    /* case1 flex-grow: 2; flex-basis: 0; */
    /* case2 flex-shrink: 2; flex-basis: 150px; */
    flex-basis: 150px;
}
.flexContainer.flexShortHand .flexItem:first-of-type~*{
    /* case1 flex-grow: 1; flex-basis: 0; */
    /* case2 flex-shrink: 1; flex-basis: 150px; */
    flex-basis: 150px;
}